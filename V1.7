Zachary Jordan


Search Drive

Drive
.
Folder Path
My Drive
ECE175 Project
NEW 
Folders and views
My Drive
Shared with me
Google Photos
Recent
Starred
Trash
768 MB used
.

C
Battleship Ver. 1.3.c

Text
BattleShit_v1.0.txt

Text
BattleShit_v1.1.txt

Text
BattleShit_v1.2.txt

Text
BattleShit_v1.4.txt

Text
BattleShit_v1.5(THIS SHIT IS STRANGE AS FUCK).txt

Text
BattleShit_v1.6.txt

C
Battleshits 1.7.c

Unknown File
BattleShits.html

Google Docs
ECE 175 Battleship Project




//NOT FINISHED!!!!



#define _CRT_SECURE_NO_WARNINGS
#include<stdio.h>
#include<stdlib.h>
#include<math.h>
#include<string.h>


typedef struct ship {
    char shiptype[20]; // e.g. Aircraft Carrier
    int shipsize; // e.q. 5
    int *X_Location; // Dynamically allocated array of length shipsize
    int *Y_Location; // Dynamically allocated array of length shipsize
    int *X_Hit; // Dynamically allocated array of length shipsize
    int *Y_Hit; // Dynamically allocated array of length shipsize
    struct ship *pt; // pointer to next ship on the list
} ship;


//prints the major grid
void print_Major(int X_Location, int Y_Location) {
    int i = 0;
    int j = 0;
    int k = 0;
    char c = 'P';
    
    char temp [10][10] = {  {'a','b','c', 'd', 'e','f','g','g', 'g', 'g'},
                            {'h','i','j', 'k', 'h','h','h','h', 'h', 'h'},
                            {' ',' ',' ', ' ', ' ',' ',' ',' ', ' ', ' '},
                            {' ',' ',' ', ' ', ' ',' ',' ',' ', ' ', ' '},
                            {' ',' ',' ', ' ', ' ',' ',' ',' ', ' ', ' '},
                            {' ',' ',' ', ' ', ' ',' ',' ',' ', ' ', ' '},
                            {' ',' ',' ', ' ', ' ',' ',' ',' ', ' ', ' '},
                            {' ',' ',' ', ' ', ' ',' ',' ',' ', ' ', ' '},
                            {' ',' ',' ', ' ', ' ',' ',' ',' ', ' ', ' '},
                            {'l','m','n', ' ', ' ',' ',' ',' ', ' ', ' '},
    };
    
    
    
    printf("      A       B       C       D       E       F       G       H       I       J       \n");
    
    
    //Prints the board structure
    
    
  
    
    for(i = 1; i <10 ;++i){
        printf("  ---------------------------------------------------------------------------------\n");
        printf("  |       |       |       |       |       |       |       |       |       |       |\n");
        printf("%d ", i);
  
        for(j = 0; j <10; ++j) {
            printf("|   %c   ", temp[k][j]);
        }
        ++k;
        printf("|\n");
        printf("  |       |       |       |       |       |       |       |       |       |       |\n");
    
        
            }
    
  
    
    if(i == 10){
        printf("  ---------------------------------------------------------------------------------\n");
        printf("  |       |       |       |       |       |       |       |       |       |       |\n");

        printf("%d", i);
        
        for(j = 0; j <10; ++j) {
            printf("|  %c    ", temp[k][j]);
        }
        printf("|\n");
        printf("  |       |       |       |       |       |       |       |       |       |       |\n");

        
    }
    
    printf("  ---------------------------------------------------------------------------------\n\n");
    
}

//prints the minor grid
void print_Minor(char X_Location, char Y_Location) {
    int i = 0;
    int j = 0;
    char k = '0';
    char c = 'P';
    
    char temp [10][10] = {  {'a','b','c', 'd', 'e','f','g','g', 'g', 'g'},
        {'h','i','j', 'k', 'h','h','h','h', 'h', 'h'},
        {' ',' ',' ', ' ', ' ',' ',' ',' ', ' ', ' '},
        {' ',' ',' ', ' ', ' ',' ',' ',' ', ' ', ' '},
        {' ',' ',' ', ' ', ' ',' ',' ',' ', ' ', ' '},
        {' ',' ',' ', ' ', ' ',' ',' ',' ', ' ', ' '},
        {' ',' ',' ', ' ', ' ',' ',' ',' ', ' ', ' '},
        {' ',' ',' ', ' ', ' ',' ',' ',' ', ' ', ' '},
        {' ',' ',' ', ' ', ' ',' ',' ',' ', ' ', ' '},
        {'l','m','n', ' ', ' ',' ',' ',' ', ' ', ' '},
    };
    
    
    k = X_Location;
    j = Y_Location;
    
    printf("    A   B   C   D   E   F   G   H   I   J \n");
    
    
    //Prints the board structure
    
    
    
    
    for(i = 1; i <10 ;++i){
        printf("  ----------------------------------------\n");
       
        printf("%d ", i);
        
        for(j = 0; j <10; ++j) {
            printf("| %c ", temp[k][j]);
        }
        ++k;
        printf("|\n");
        
        
    }
    
    
    
    if(i == 10){
        printf("  ----------------------------------------\n");
        printf("%d", i);
        
        for(j = 0; j <10; ++j) {
            printf("| %c ", temp[k][j]);
        }
        printf("|\n");
        
        
        
    }
    
    printf("  ----------------------------------------\n");
    

}

ship *ship_placement_file(FILE *inp, ship *player, ship *temp, ship *tail) {
    char line[100];
    int size = 100;
    int i;
    int *t;
    
    while(fscanf(inp,"%s",line) != EOF){ //reads a line of code and places it into the line string
        temp = (ship*)malloc(sizeof(ship)); // creation of memory for list
        strcpy(temp->shiptype,line); // saves ship type to temp.shiptype
        
        fscanf(inp, "%d", &temp->shipsize); //moves to the next line and saves ship length to temp.shiptype
        
        temp->X_Location = (int *)calloc(sizeof(int), temp->shipsize); //dynamically allocates memory for X_Location array based on shipsize
        temp->Y_Location = (int *)calloc(sizeof(int), temp->shipsize); //dynamically allocates memory for Y_Location array based on shipsize
        
        //X_Location
        t = temp->X_Location; //t points to the memory location of the first element of the X_Location array
        for (i = 0; i < temp->shipsize; i++) {
            fscanf(inp, "%d", t);
            t++;
        }
        //Y_Location
        t = temp->Y_Location;
        for (i = 0; i < temp->shipsize; i++) {
            fscanf(inp, "%d", t);
            t++;
        }
        
        if (player == NULL) {
            player = temp; // setting the head of the list
        }
        else {
            tail->pt = temp; // else connecting to previous element
        }
        tail = temp; // updating the current element
        tail->pt = NULL; // setting pointer to null.
    }
    return(player);
}

//ship placement by prompting user
void ship_placement() {
    ship *player = NULL;
    ship *temp;
    ship *tail = NULL;
    int *t = NULL;
    char x[10];
    char y[10];
    int num, i;
    ship *ships;
    int X_Location;
    int j = 0;
    
    //Asks how many ships each player has and assigns it to num
    printf("How many ships will each player have?");
    scanf(" %d", &num);
   
    //for loop continuing until the appropriate number of ships is given to player 1
    for (i = 0; i < num; i++) {
        
        //Dynamically allocated memory for temp pointer
        ship* temp = (ship*)malloc(sizeof(ship));
        
        //enter the type of ships and assigns it to shiptype
        printf("Please enter the type of ship: ");
        scanf(" %s", temp->shiptype);
        printf("%s\n", temp->shiptype);
        
        printf("Please enter the ships size: ");
        scanf("%d", &temp->shipsize);
        //printf(" %d\n", temp->shipsize);
        
        
        //x position pointer to an array of integers for x-locations
        int *temp2[temp->shipsize];
        
        for (j = 0; j < temp->shipsize; j++) {
            printf("Please enter the ships x position: ");
            scanf("%d", &X_Location);
            printf("Integer is %d\t", X_Location);
            temp->X_Location = &X_Location;
            printf("Pointer is %d\n", temp->X_Location[j]);
    
     
        }
        printf("%d\n", temp->X_Location[1]);
       
    }
        /* t = temp->X_Location; //t points to the memory location of the first element of the X_Location array
        for (i = 0; i < temp->shipsize; i++) {
            scanf("%d", t);
            printf("X Location is %d", *t);
        }*/
        /*printf("Please enter the ships y position: ");
        for (i = 0; i < temp->shipsize; i++) {
            scanf("%d", &temp->Y_Location[i]);
        }*/
        
        /*while (location_check(temp->X_Location, temp->Y_Location, temp) == 0) {
            printf("The ship location is not valid. Please choose a different location.\n");
            
            printf("Please enter the ships x position: ");
            for (i = 0; i < temp->shipsize; i++) {
                scanf("%d", &temp->X_Location[i]);
            }
            
            printf("Please enter the ships y position: ");
            for (i = 0; i < temp->shipsize; i++) {
                scanf("%d", &temp->Y_Location[i]);
            }
        }
        
        if (player == NULL) {
            player = temp; //setting the head of the list
        }
        else {
            tail->pt = temp;    //else connecting to previous element
        }
        tail = temp;    //updating current element
        tail->pt = NULL;    //setting pointer to null
    }*/
    
    return;
    
}


void print_Score(char player[], int hit, int miss, int sunk) {
    printf("%s\n", player);
    printf("  Hit:	%d\n", hit);
    printf("  Miss:	%d\n", miss);
    printf("  Sunk:	%d\n", sunk);
}
//checks if the ship place ment location is valid
int location_check(int x, int y, ship *player) {
    //look at tic-tac-toe/evolve hw for help
    if (x == 1) {
        
        
        //returns one if the spot is open
        return(1);
    }
    else {
        
        //returns zero if the spot is already been attempted
        return(0);
    }
}

//randomly chooses computer ship placement
void comp_place() {
    
}

//randomly chooses a computer hit location
void comp_hit() {
    
}

//Checks the status of a ship
void ship_Status(int x[], int y[],int xhit[], int yhit[], ship player) {
    
}

int main(void) {
    /*char *name;
     name = (char*)calloc(sizeof(char),30);
     
     printf("Player 1 Enter your name: ");
     scanf("%s", &name);
     
     printf("%s", name);
     */
    FILE *playerInfo;
    FILE *compInfo;
    ship *player = NULL;
    ship *Comp = NULL;
    ship *temp = NULL;
    ship *tail = NULL;
    char check = 'y';


    printf("Do you wish to import game parameters from a file? (y/n)\n");
    scanf(" %c", &check);
    
    
   if (check == 'y') {
        playerInfo = fopen("Battle1_Player.txt", "r");
        compInfo = fopen("Battle1_Computer.txt", "r");
        
        if (playerInfo == NULL || compInfo == NULL) {
            printf("The files could not be located\n");
        }
        else {
            player = ship_placement_file(playerInfo, player, temp, tail);
           // print_ships(player);
            fclose(playerInfo);
            fclose(compInfo);
        }
    }
    else if (check != 'y') {
        ship_placement();
        
    }
    //print_Major();
    //print_Minor();

    
    return(0);
}
